// DO NOT EDIT!
// Code generated by ffjson <https://github.com/pquerna/ffjson>
// source: device.go
// DO NOT EDIT!

package openrtb

import (
	"bytes"
	"encoding/json"
	"fmt"
	fflib "github.com/pquerna/ffjson/fflib/v1"
)

func (mj *Device) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if mj == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := mj.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
func (mj *Device) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if mj == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{ `)
	if mj.DNT != 0 {
		buf.WriteString(`"dnt":`)
		fflib.FormatBits2(buf, uint64(mj.DNT), 10, mj.DNT < 0)
		buf.WriteByte(',')
	}
	if mj.LMT != 0 {
		buf.WriteString(`"lmt":`)
		fflib.FormatBits2(buf, uint64(mj.LMT), 10, mj.LMT < 0)
		buf.WriteByte(',')
	}
	if len(mj.UA) != 0 {
		buf.WriteString(`"ua":`)
		fflib.WriteJsonString(buf, string(mj.UA))
		buf.WriteByte(',')
	}
	if len(mj.IP) != 0 {
		buf.WriteString(`"ip":`)
		fflib.WriteJsonString(buf, string(mj.IP))
		buf.WriteByte(',')
	}
	if mj.Geo != nil {
		if true {
			/* Struct fall back. type=openrtb.Geo kind=struct */
			buf.WriteString(`"geo":`)
			err = buf.Encode(mj.Geo)
			if err != nil {
				return err
			}
			buf.WriteByte(',')
		}
	}
	if len(mj.IDSHA1) != 0 {
		buf.WriteString(`"didsha1":`)
		fflib.WriteJsonString(buf, string(mj.IDSHA1))
		buf.WriteByte(',')
	}
	if len(mj.IDMD5) != 0 {
		buf.WriteString(`"didmd5":`)
		fflib.WriteJsonString(buf, string(mj.IDMD5))
		buf.WriteByte(',')
	}
	if len(mj.PIDSHA1) != 0 {
		buf.WriteString(`"dpidsha1":`)
		fflib.WriteJsonString(buf, string(mj.PIDSHA1))
		buf.WriteByte(',')
	}
	if len(mj.PIDMD5) != 0 {
		buf.WriteString(`"dpidmd5":`)
		fflib.WriteJsonString(buf, string(mj.PIDMD5))
		buf.WriteByte(',')
	}
	if len(mj.MacSHA1) != 0 {
		buf.WriteString(`"macsha1":`)
		fflib.WriteJsonString(buf, string(mj.MacSHA1))
		buf.WriteByte(',')
	}
	if len(mj.MacMD5) != 0 {
		buf.WriteString(`"macmd5":`)
		fflib.WriteJsonString(buf, string(mj.MacMD5))
		buf.WriteByte(',')
	}
	if len(mj.IPv6) != 0 {
		buf.WriteString(`"ipv6":`)
		fflib.WriteJsonString(buf, string(mj.IPv6))
		buf.WriteByte(',')
	}
	if len(mj.Carrier) != 0 {
		buf.WriteString(`"carrier":`)
		fflib.WriteJsonString(buf, string(mj.Carrier))
		buf.WriteByte(',')
	}
	if len(mj.Language) != 0 {
		buf.WriteString(`"language":`)
		fflib.WriteJsonString(buf, string(mj.Language))
		buf.WriteByte(',')
	}
	if len(mj.Make) != 0 {
		buf.WriteString(`"make":`)
		fflib.WriteJsonString(buf, string(mj.Make))
		buf.WriteByte(',')
	}
	if len(mj.Model) != 0 {
		buf.WriteString(`"model":`)
		fflib.WriteJsonString(buf, string(mj.Model))
		buf.WriteByte(',')
	}
	if len(mj.OS) != 0 {
		buf.WriteString(`"os":`)
		fflib.WriteJsonString(buf, string(mj.OS))
		buf.WriteByte(',')
	}
	if len(mj.OSVer) != 0 {
		buf.WriteString(`"osv":`)
		fflib.WriteJsonString(buf, string(mj.OSVer))
		buf.WriteByte(',')
	}
	if mj.JS != 0 {
		buf.WriteString(`"js":`)
		fflib.FormatBits2(buf, uint64(mj.JS), 10, mj.JS < 0)
		buf.WriteByte(',')
	}
	if mj.ConnType != 0 {
		buf.WriteString(`"connectiontype":`)
		fflib.FormatBits2(buf, uint64(mj.ConnType), 10, mj.ConnType < 0)
		buf.WriteByte(',')
	}
	if mj.DeviceType != 0 {
		buf.WriteString(`"devicetype":`)
		fflib.FormatBits2(buf, uint64(mj.DeviceType), 10, mj.DeviceType < 0)
		buf.WriteByte(',')
	}
	if len(mj.FlashVer) != 0 {
		buf.WriteString(`"flashver":`)
		fflib.WriteJsonString(buf, string(mj.FlashVer))
		buf.WriteByte(',')
	}
	if len(mj.IFA) != 0 {
		buf.WriteString(`"ifa":`)
		fflib.WriteJsonString(buf, string(mj.IFA))
		buf.WriteByte(',')
	}
	if mj.Ext != nil {
		if true {
			buf.WriteString(`"ext":`)

			{

				obj, err = mj.Ext.MarshalJSON()
				if err != nil {
					return err
				}
				buf.Write(obj)

			}
			buf.WriteByte(',')
		}
	}
	if mj.H != 0 {
		buf.WriteString(`"h":`)
		fflib.FormatBits2(buf, uint64(mj.H), 10, mj.H < 0)
		buf.WriteByte(',')
	}
	if mj.W != 0 {
		buf.WriteString(`"w":`)
		fflib.FormatBits2(buf, uint64(mj.W), 10, mj.W < 0)
		buf.WriteByte(',')
	}
	if mj.PPI != 0 {
		buf.WriteString(`"ppi":`)
		fflib.FormatBits2(buf, uint64(mj.PPI), 10, mj.PPI < 0)
		buf.WriteByte(',')
	}
	if mj.PxRatio != 0 {
		buf.WriteString(`"pxratio":`)
		fflib.AppendFloat(buf, float64(mj.PxRatio), 'g', -1, 64)
		buf.WriteByte(',')
	}
	if len(mj.HwVer) != 0 {
		buf.WriteString(`"hwv":`)
		fflib.WriteJsonString(buf, string(mj.HwVer))
		buf.WriteByte(',')
	}
	buf.Rewind(1)
	buf.WriteByte('}')
	return nil
}

const (
	ffj_t_Devicebase = iota
	ffj_t_Deviceno_such_key

	ffj_t_Device_DNT

	ffj_t_Device_LMT

	ffj_t_Device_UA

	ffj_t_Device_IP

	ffj_t_Device_Geo

	ffj_t_Device_IDSHA1

	ffj_t_Device_IDMD5

	ffj_t_Device_PIDSHA1

	ffj_t_Device_PIDMD5

	ffj_t_Device_MacSHA1

	ffj_t_Device_MacMD5

	ffj_t_Device_IPv6

	ffj_t_Device_Carrier

	ffj_t_Device_Language

	ffj_t_Device_Make

	ffj_t_Device_Model

	ffj_t_Device_OS

	ffj_t_Device_OSVer

	ffj_t_Device_JS

	ffj_t_Device_ConnType

	ffj_t_Device_DeviceType

	ffj_t_Device_FlashVer

	ffj_t_Device_IFA

	ffj_t_Device_Ext

	ffj_t_Device_H

	ffj_t_Device_W

	ffj_t_Device_PPI

	ffj_t_Device_PxRatio

	ffj_t_Device_HwVer
)

var ffj_key_Device_DNT = []byte("dnt")

var ffj_key_Device_LMT = []byte("lmt")

var ffj_key_Device_UA = []byte("ua")

var ffj_key_Device_IP = []byte("ip")

var ffj_key_Device_Geo = []byte("geo")

var ffj_key_Device_IDSHA1 = []byte("didsha1")

var ffj_key_Device_IDMD5 = []byte("didmd5")

var ffj_key_Device_PIDSHA1 = []byte("dpidsha1")

var ffj_key_Device_PIDMD5 = []byte("dpidmd5")

var ffj_key_Device_MacSHA1 = []byte("macsha1")

var ffj_key_Device_MacMD5 = []byte("macmd5")

var ffj_key_Device_IPv6 = []byte("ipv6")

var ffj_key_Device_Carrier = []byte("carrier")

var ffj_key_Device_Language = []byte("language")

var ffj_key_Device_Make = []byte("make")

var ffj_key_Device_Model = []byte("model")

var ffj_key_Device_OS = []byte("os")

var ffj_key_Device_OSVer = []byte("osv")

var ffj_key_Device_JS = []byte("js")

var ffj_key_Device_ConnType = []byte("connectiontype")

var ffj_key_Device_DeviceType = []byte("devicetype")

var ffj_key_Device_FlashVer = []byte("flashver")

var ffj_key_Device_IFA = []byte("ifa")

var ffj_key_Device_Ext = []byte("ext")

var ffj_key_Device_H = []byte("h")

var ffj_key_Device_W = []byte("w")

var ffj_key_Device_PPI = []byte("ppi")

var ffj_key_Device_PxRatio = []byte("pxratio")

var ffj_key_Device_HwVer = []byte("hwv")

func (uj *Device) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return uj.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

func (uj *Device) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error = nil
	currentKey := ffj_t_Devicebase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffj_t_Deviceno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'c':

					if bytes.Equal(ffj_key_Device_Carrier, kn) {
						currentKey = ffj_t_Device_Carrier
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Device_ConnType, kn) {
						currentKey = ffj_t_Device_ConnType
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'd':

					if bytes.Equal(ffj_key_Device_DNT, kn) {
						currentKey = ffj_t_Device_DNT
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Device_IDSHA1, kn) {
						currentKey = ffj_t_Device_IDSHA1
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Device_IDMD5, kn) {
						currentKey = ffj_t_Device_IDMD5
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Device_PIDSHA1, kn) {
						currentKey = ffj_t_Device_PIDSHA1
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Device_PIDMD5, kn) {
						currentKey = ffj_t_Device_PIDMD5
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Device_DeviceType, kn) {
						currentKey = ffj_t_Device_DeviceType
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'e':

					if bytes.Equal(ffj_key_Device_Ext, kn) {
						currentKey = ffj_t_Device_Ext
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'f':

					if bytes.Equal(ffj_key_Device_FlashVer, kn) {
						currentKey = ffj_t_Device_FlashVer
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'g':

					if bytes.Equal(ffj_key_Device_Geo, kn) {
						currentKey = ffj_t_Device_Geo
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'h':

					if bytes.Equal(ffj_key_Device_H, kn) {
						currentKey = ffj_t_Device_H
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Device_HwVer, kn) {
						currentKey = ffj_t_Device_HwVer
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'i':

					if bytes.Equal(ffj_key_Device_IP, kn) {
						currentKey = ffj_t_Device_IP
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Device_IPv6, kn) {
						currentKey = ffj_t_Device_IPv6
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Device_IFA, kn) {
						currentKey = ffj_t_Device_IFA
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'j':

					if bytes.Equal(ffj_key_Device_JS, kn) {
						currentKey = ffj_t_Device_JS
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'l':

					if bytes.Equal(ffj_key_Device_LMT, kn) {
						currentKey = ffj_t_Device_LMT
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Device_Language, kn) {
						currentKey = ffj_t_Device_Language
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'm':

					if bytes.Equal(ffj_key_Device_MacSHA1, kn) {
						currentKey = ffj_t_Device_MacSHA1
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Device_MacMD5, kn) {
						currentKey = ffj_t_Device_MacMD5
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Device_Make, kn) {
						currentKey = ffj_t_Device_Make
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Device_Model, kn) {
						currentKey = ffj_t_Device_Model
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'o':

					if bytes.Equal(ffj_key_Device_OS, kn) {
						currentKey = ffj_t_Device_OS
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Device_OSVer, kn) {
						currentKey = ffj_t_Device_OSVer
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'p':

					if bytes.Equal(ffj_key_Device_PPI, kn) {
						currentKey = ffj_t_Device_PPI
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Device_PxRatio, kn) {
						currentKey = ffj_t_Device_PxRatio
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'u':

					if bytes.Equal(ffj_key_Device_UA, kn) {
						currentKey = ffj_t_Device_UA
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'w':

					if bytes.Equal(ffj_key_Device_W, kn) {
						currentKey = ffj_t_Device_W
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.SimpleLetterEqualFold(ffj_key_Device_HwVer, kn) {
					currentKey = ffj_t_Device_HwVer
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Device_PxRatio, kn) {
					currentKey = ffj_t_Device_PxRatio
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Device_PPI, kn) {
					currentKey = ffj_t_Device_PPI
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Device_W, kn) {
					currentKey = ffj_t_Device_W
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Device_H, kn) {
					currentKey = ffj_t_Device_H
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Device_Ext, kn) {
					currentKey = ffj_t_Device_Ext
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Device_IFA, kn) {
					currentKey = ffj_t_Device_IFA
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Device_FlashVer, kn) {
					currentKey = ffj_t_Device_FlashVer
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Device_DeviceType, kn) {
					currentKey = ffj_t_Device_DeviceType
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Device_ConnType, kn) {
					currentKey = ffj_t_Device_ConnType
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Device_JS, kn) {
					currentKey = ffj_t_Device_JS
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Device_OSVer, kn) {
					currentKey = ffj_t_Device_OSVer
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Device_OS, kn) {
					currentKey = ffj_t_Device_OS
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Device_Model, kn) {
					currentKey = ffj_t_Device_Model
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Device_Make, kn) {
					currentKey = ffj_t_Device_Make
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Device_Language, kn) {
					currentKey = ffj_t_Device_Language
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Device_Carrier, kn) {
					currentKey = ffj_t_Device_Carrier
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_Device_IPv6, kn) {
					currentKey = ffj_t_Device_IPv6
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_Device_MacMD5, kn) {
					currentKey = ffj_t_Device_MacMD5
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Device_MacSHA1, kn) {
					currentKey = ffj_t_Device_MacSHA1
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_Device_PIDMD5, kn) {
					currentKey = ffj_t_Device_PIDMD5
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Device_PIDSHA1, kn) {
					currentKey = ffj_t_Device_PIDSHA1
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_Device_IDMD5, kn) {
					currentKey = ffj_t_Device_IDMD5
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Device_IDSHA1, kn) {
					currentKey = ffj_t_Device_IDSHA1
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Device_Geo, kn) {
					currentKey = ffj_t_Device_Geo
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Device_IP, kn) {
					currentKey = ffj_t_Device_IP
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Device_UA, kn) {
					currentKey = ffj_t_Device_UA
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Device_LMT, kn) {
					currentKey = ffj_t_Device_LMT
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Device_DNT, kn) {
					currentKey = ffj_t_Device_DNT
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffj_t_Deviceno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffj_t_Device_DNT:
					goto handle_DNT

				case ffj_t_Device_LMT:
					goto handle_LMT

				case ffj_t_Device_UA:
					goto handle_UA

				case ffj_t_Device_IP:
					goto handle_IP

				case ffj_t_Device_Geo:
					goto handle_Geo

				case ffj_t_Device_IDSHA1:
					goto handle_IDSHA1

				case ffj_t_Device_IDMD5:
					goto handle_IDMD5

				case ffj_t_Device_PIDSHA1:
					goto handle_PIDSHA1

				case ffj_t_Device_PIDMD5:
					goto handle_PIDMD5

				case ffj_t_Device_MacSHA1:
					goto handle_MacSHA1

				case ffj_t_Device_MacMD5:
					goto handle_MacMD5

				case ffj_t_Device_IPv6:
					goto handle_IPv6

				case ffj_t_Device_Carrier:
					goto handle_Carrier

				case ffj_t_Device_Language:
					goto handle_Language

				case ffj_t_Device_Make:
					goto handle_Make

				case ffj_t_Device_Model:
					goto handle_Model

				case ffj_t_Device_OS:
					goto handle_OS

				case ffj_t_Device_OSVer:
					goto handle_OSVer

				case ffj_t_Device_JS:
					goto handle_JS

				case ffj_t_Device_ConnType:
					goto handle_ConnType

				case ffj_t_Device_DeviceType:
					goto handle_DeviceType

				case ffj_t_Device_FlashVer:
					goto handle_FlashVer

				case ffj_t_Device_IFA:
					goto handle_IFA

				case ffj_t_Device_Ext:
					goto handle_Ext

				case ffj_t_Device_H:
					goto handle_H

				case ffj_t_Device_W:
					goto handle_W

				case ffj_t_Device_PPI:
					goto handle_PPI

				case ffj_t_Device_PxRatio:
					goto handle_PxRatio

				case ffj_t_Device_HwVer:
					goto handle_HwVer

				case ffj_t_Deviceno_such_key:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_DNT:

	/* handler: uj.DNT type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.DNT = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_LMT:

	/* handler: uj.LMT type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.LMT = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_UA:

	/* handler: uj.UA type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.UA = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_IP:

	/* handler: uj.IP type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.IP = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Geo:

	/* handler: uj.Geo type=openrtb.Geo kind=struct quoted=false*/

	{
		/* Falling back. type=openrtb.Geo kind=struct */
		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		err = json.Unmarshal(tbuf, &uj.Geo)
		if err != nil {
			return fs.WrapErr(err)
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_IDSHA1:

	/* handler: uj.IDSHA1 type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.IDSHA1 = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_IDMD5:

	/* handler: uj.IDMD5 type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.IDMD5 = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_PIDSHA1:

	/* handler: uj.PIDSHA1 type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.PIDSHA1 = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_PIDMD5:

	/* handler: uj.PIDMD5 type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.PIDMD5 = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_MacSHA1:

	/* handler: uj.MacSHA1 type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.MacSHA1 = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_MacMD5:

	/* handler: uj.MacMD5 type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.MacMD5 = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_IPv6:

	/* handler: uj.IPv6 type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.IPv6 = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Carrier:

	/* handler: uj.Carrier type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Carrier = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Language:

	/* handler: uj.Language type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Language = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Make:

	/* handler: uj.Make type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Make = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Model:

	/* handler: uj.Model type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Model = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_OS:

	/* handler: uj.OS type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.OS = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_OSVer:

	/* handler: uj.OSVer type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.OSVer = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_JS:

	/* handler: uj.JS type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.JS = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_ConnType:

	/* handler: uj.ConnType type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.ConnType = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_DeviceType:

	/* handler: uj.DeviceType type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.DeviceType = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_FlashVer:

	/* handler: uj.FlashVer type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.FlashVer = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_IFA:

	/* handler: uj.IFA type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.IFA = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Ext:

	/* handler: uj.Ext type=json.RawMessage kind=slice quoted=false*/

	{
		if tok == fflib.FFTok_null {

			uj.Ext = nil

			state = fflib.FFParse_after_value
			goto mainparse
		}

		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		if uj.Ext == nil {
			uj.Ext = new(json.RawMessage)
		}

		err = uj.Ext.UnmarshalJSON(tbuf)
		if err != nil {
			return fs.WrapErr(err)
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_H:

	/* handler: uj.H type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.H = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_W:

	/* handler: uj.W type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.W = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_PPI:

	/* handler: uj.PPI type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.PPI = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_PxRatio:

	/* handler: uj.PxRatio type=float64 kind=float64 quoted=false*/

	{
		if tok != fflib.FFTok_double && tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for float64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseFloat(fs.Output.Bytes(), 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.PxRatio = float64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_HwVer:

	/* handler: uj.HwVer type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.HwVer = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:
	return nil
}
