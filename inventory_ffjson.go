// DO NOT EDIT!
// Code generated by ffjson <https://github.com/pquerna/ffjson>
// source: inventory.go
// DO NOT EDIT!

package openrtb

import (
	"bytes"
	"encoding/json"
	"fmt"
	fflib "github.com/pquerna/ffjson/fflib/v1"
)

func (mj *App) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if mj == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := mj.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
func (mj *App) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if mj == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{ `)
	if len(mj.Bundle) != 0 {
		buf.WriteString(`"bundle":`)
		fflib.WriteJsonString(buf, string(mj.Bundle))
		buf.WriteByte(',')
	}
	if len(mj.StoreURL) != 0 {
		buf.WriteString(`"storeurl":`)
		fflib.WriteJsonString(buf, string(mj.StoreURL))
		buf.WriteByte(',')
	}
	if len(mj.Ver) != 0 {
		buf.WriteString(`"ver":`)
		fflib.WriteJsonString(buf, string(mj.Ver))
		buf.WriteByte(',')
	}
	if mj.Paid != 0 {
		buf.WriteString(`"paid":`)
		fflib.FormatBits2(buf, uint64(mj.Paid), 10, mj.Paid < 0)
		buf.WriteByte(',')
	}
	if len(mj.ID) != 0 {
		buf.WriteString(`"id":`)
		fflib.WriteJsonString(buf, string(mj.ID))
		buf.WriteByte(',')
	}
	if len(mj.Name) != 0 {
		buf.WriteString(`"name":`)
		fflib.WriteJsonString(buf, string(mj.Name))
		buf.WriteByte(',')
	}
	if len(mj.Domain) != 0 {
		buf.WriteString(`"domain":`)
		fflib.WriteJsonString(buf, string(mj.Domain))
		buf.WriteByte(',')
	}
	if len(mj.Cat) != 0 {
		buf.WriteString(`"cat":`)
		if mj.Cat != nil {
			buf.WriteString(`[`)
			for i, v := range mj.Cat {
				if i != 0 {
					buf.WriteString(`,`)
				}
				fflib.WriteJsonString(buf, string(v))
			}
			buf.WriteString(`]`)
		} else {
			buf.WriteString(`null`)
		}
		buf.WriteByte(',')
	}
	if len(mj.SectionCat) != 0 {
		buf.WriteString(`"sectioncat":`)
		if mj.SectionCat != nil {
			buf.WriteString(`[`)
			for i, v := range mj.SectionCat {
				if i != 0 {
					buf.WriteString(`,`)
				}
				fflib.WriteJsonString(buf, string(v))
			}
			buf.WriteString(`]`)
		} else {
			buf.WriteString(`null`)
		}
		buf.WriteByte(',')
	}
	if len(mj.PageCat) != 0 {
		buf.WriteString(`"pagecat":`)
		if mj.PageCat != nil {
			buf.WriteString(`[`)
			for i, v := range mj.PageCat {
				if i != 0 {
					buf.WriteString(`,`)
				}
				fflib.WriteJsonString(buf, string(v))
			}
			buf.WriteString(`]`)
		} else {
			buf.WriteString(`null`)
		}
		buf.WriteByte(',')
	}
	if mj.PrivacyPolicy != nil {
		if true {
			buf.WriteString(`"pivacypolicy":`)
			fflib.FormatBits2(buf, uint64(*mj.PrivacyPolicy), 10, *mj.PrivacyPolicy < 0)
			buf.WriteByte(',')
		}
	}
	if mj.Publisher != nil {
		if true {
			/* Struct fall back. type=openrtb.Publisher kind=struct */
			buf.WriteString(`"publisher":`)
			err = buf.Encode(mj.Publisher)
			if err != nil {
				return err
			}
			buf.WriteByte(',')
		}
	}
	if mj.Content != nil {
		if true {
			buf.WriteString(`"content":`)

			{

				err = mj.Content.MarshalJSONBuf(buf)
				if err != nil {
					return err
				}

			}
			buf.WriteByte(',')
		}
	}
	if len(mj.Keywords) != 0 {
		buf.WriteString(`"keywords":`)
		fflib.WriteJsonString(buf, string(mj.Keywords))
		buf.WriteByte(',')
	}
	if mj.Ext != nil {
		if true {
			buf.WriteString(`"ext":`)

			{

				obj, err = mj.Ext.MarshalJSON()
				if err != nil {
					return err
				}
				buf.Write(obj)

			}
			buf.WriteByte(',')
		}
	}
	buf.Rewind(1)
	buf.WriteByte('}')
	return nil
}

const (
	ffj_t_Appbase = iota
	ffj_t_Appno_such_key

	ffj_t_App_Bundle

	ffj_t_App_StoreURL

	ffj_t_App_Ver

	ffj_t_App_Paid

	ffj_t_App_ID

	ffj_t_App_Name

	ffj_t_App_Domain

	ffj_t_App_Cat

	ffj_t_App_SectionCat

	ffj_t_App_PageCat

	ffj_t_App_PrivacyPolicy

	ffj_t_App_Publisher

	ffj_t_App_Content

	ffj_t_App_Keywords

	ffj_t_App_Ext
)

var ffj_key_App_Bundle = []byte("bundle")

var ffj_key_App_StoreURL = []byte("storeurl")

var ffj_key_App_Ver = []byte("ver")

var ffj_key_App_Paid = []byte("paid")

var ffj_key_App_ID = []byte("id")

var ffj_key_App_Name = []byte("name")

var ffj_key_App_Domain = []byte("domain")

var ffj_key_App_Cat = []byte("cat")

var ffj_key_App_SectionCat = []byte("sectioncat")

var ffj_key_App_PageCat = []byte("pagecat")

var ffj_key_App_PrivacyPolicy = []byte("pivacypolicy")

var ffj_key_App_Publisher = []byte("publisher")

var ffj_key_App_Content = []byte("content")

var ffj_key_App_Keywords = []byte("keywords")

var ffj_key_App_Ext = []byte("ext")

func (uj *App) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return uj.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

func (uj *App) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error = nil
	currentKey := ffj_t_Appbase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffj_t_Appno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'b':

					if bytes.Equal(ffj_key_App_Bundle, kn) {
						currentKey = ffj_t_App_Bundle
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'c':

					if bytes.Equal(ffj_key_App_Cat, kn) {
						currentKey = ffj_t_App_Cat
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_App_Content, kn) {
						currentKey = ffj_t_App_Content
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'd':

					if bytes.Equal(ffj_key_App_Domain, kn) {
						currentKey = ffj_t_App_Domain
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'e':

					if bytes.Equal(ffj_key_App_Ext, kn) {
						currentKey = ffj_t_App_Ext
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'i':

					if bytes.Equal(ffj_key_App_ID, kn) {
						currentKey = ffj_t_App_ID
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'k':

					if bytes.Equal(ffj_key_App_Keywords, kn) {
						currentKey = ffj_t_App_Keywords
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'n':

					if bytes.Equal(ffj_key_App_Name, kn) {
						currentKey = ffj_t_App_Name
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'p':

					if bytes.Equal(ffj_key_App_Paid, kn) {
						currentKey = ffj_t_App_Paid
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_App_PageCat, kn) {
						currentKey = ffj_t_App_PageCat
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_App_PrivacyPolicy, kn) {
						currentKey = ffj_t_App_PrivacyPolicy
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_App_Publisher, kn) {
						currentKey = ffj_t_App_Publisher
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 's':

					if bytes.Equal(ffj_key_App_StoreURL, kn) {
						currentKey = ffj_t_App_StoreURL
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_App_SectionCat, kn) {
						currentKey = ffj_t_App_SectionCat
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'v':

					if bytes.Equal(ffj_key_App_Ver, kn) {
						currentKey = ffj_t_App_Ver
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.SimpleLetterEqualFold(ffj_key_App_Ext, kn) {
					currentKey = ffj_t_App_Ext
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_App_Keywords, kn) {
					currentKey = ffj_t_App_Keywords
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_App_Content, kn) {
					currentKey = ffj_t_App_Content
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_App_Publisher, kn) {
					currentKey = ffj_t_App_Publisher
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_App_PrivacyPolicy, kn) {
					currentKey = ffj_t_App_PrivacyPolicy
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_App_PageCat, kn) {
					currentKey = ffj_t_App_PageCat
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_App_SectionCat, kn) {
					currentKey = ffj_t_App_SectionCat
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_App_Cat, kn) {
					currentKey = ffj_t_App_Cat
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_App_Domain, kn) {
					currentKey = ffj_t_App_Domain
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_App_Name, kn) {
					currentKey = ffj_t_App_Name
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_App_ID, kn) {
					currentKey = ffj_t_App_ID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_App_Paid, kn) {
					currentKey = ffj_t_App_Paid
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_App_Ver, kn) {
					currentKey = ffj_t_App_Ver
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_App_StoreURL, kn) {
					currentKey = ffj_t_App_StoreURL
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_App_Bundle, kn) {
					currentKey = ffj_t_App_Bundle
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffj_t_Appno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffj_t_App_Bundle:
					goto handle_Bundle

				case ffj_t_App_StoreURL:
					goto handle_StoreURL

				case ffj_t_App_Ver:
					goto handle_Ver

				case ffj_t_App_Paid:
					goto handle_Paid

				case ffj_t_App_ID:
					goto handle_ID

				case ffj_t_App_Name:
					goto handle_Name

				case ffj_t_App_Domain:
					goto handle_Domain

				case ffj_t_App_Cat:
					goto handle_Cat

				case ffj_t_App_SectionCat:
					goto handle_SectionCat

				case ffj_t_App_PageCat:
					goto handle_PageCat

				case ffj_t_App_PrivacyPolicy:
					goto handle_PrivacyPolicy

				case ffj_t_App_Publisher:
					goto handle_Publisher

				case ffj_t_App_Content:
					goto handle_Content

				case ffj_t_App_Keywords:
					goto handle_Keywords

				case ffj_t_App_Ext:
					goto handle_Ext

				case ffj_t_Appno_such_key:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_Bundle:

	/* handler: uj.Bundle type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Bundle = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_StoreURL:

	/* handler: uj.StoreURL type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.StoreURL = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Ver:

	/* handler: uj.Ver type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Ver = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Paid:

	/* handler: uj.Paid type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.Paid = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_ID:

	/* handler: uj.ID type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.ID = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Name:

	/* handler: uj.Name type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Name = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Domain:

	/* handler: uj.Domain type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Domain = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Cat:

	/* handler: uj.Cat type=[]string kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			uj.Cat = nil
		} else {

			uj.Cat = make([]string, 0)

			wantVal := true

			for {

				var tmp_uj__Cat string

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: tmp_uj__Cat type=string kind=string quoted=false*/

				{

					{
						if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
							return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
						}
					}

					if tok == fflib.FFTok_null {

					} else {

						outBuf := fs.Output.Bytes()

						tmp_uj__Cat = string(string(outBuf))

					}
				}

				uj.Cat = append(uj.Cat, tmp_uj__Cat)
				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_SectionCat:

	/* handler: uj.SectionCat type=[]string kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			uj.SectionCat = nil
		} else {

			uj.SectionCat = make([]string, 0)

			wantVal := true

			for {

				var tmp_uj__SectionCat string

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: tmp_uj__SectionCat type=string kind=string quoted=false*/

				{

					{
						if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
							return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
						}
					}

					if tok == fflib.FFTok_null {

					} else {

						outBuf := fs.Output.Bytes()

						tmp_uj__SectionCat = string(string(outBuf))

					}
				}

				uj.SectionCat = append(uj.SectionCat, tmp_uj__SectionCat)
				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_PageCat:

	/* handler: uj.PageCat type=[]string kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			uj.PageCat = nil
		} else {

			uj.PageCat = make([]string, 0)

			wantVal := true

			for {

				var tmp_uj__PageCat string

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: tmp_uj__PageCat type=string kind=string quoted=false*/

				{

					{
						if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
							return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
						}
					}

					if tok == fflib.FFTok_null {

					} else {

						outBuf := fs.Output.Bytes()

						tmp_uj__PageCat = string(string(outBuf))

					}
				}

				uj.PageCat = append(uj.PageCat, tmp_uj__PageCat)
				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_PrivacyPolicy:

	/* handler: uj.PrivacyPolicy type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

			uj.PrivacyPolicy = nil

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			ttypval := int(tval)
			uj.PrivacyPolicy = &ttypval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Publisher:

	/* handler: uj.Publisher type=openrtb.Publisher kind=struct quoted=false*/

	{
		/* Falling back. type=openrtb.Publisher kind=struct */
		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		err = json.Unmarshal(tbuf, &uj.Publisher)
		if err != nil {
			return fs.WrapErr(err)
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Content:

	/* handler: uj.Content type=openrtb.Content kind=struct quoted=false*/

	{
		if tok == fflib.FFTok_null {

			uj.Content = nil

			state = fflib.FFParse_after_value
			goto mainparse
		}

		if uj.Content == nil {
			uj.Content = new(Content)
		}

		err = uj.Content.UnmarshalJSONFFLexer(fs, fflib.FFParse_want_key)
		if err != nil {
			return err
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Keywords:

	/* handler: uj.Keywords type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Keywords = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Ext:

	/* handler: uj.Ext type=json.RawMessage kind=slice quoted=false*/

	{
		if tok == fflib.FFTok_null {

			uj.Ext = nil

			state = fflib.FFParse_after_value
			goto mainparse
		}

		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		if uj.Ext == nil {
			uj.Ext = new(json.RawMessage)
		}

		err = uj.Ext.UnmarshalJSON(tbuf)
		if err != nil {
			return fs.WrapErr(err)
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:
	return nil
}

func (mj *Inventory) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if mj == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := mj.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
func (mj *Inventory) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if mj == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{ `)
	if len(mj.ID) != 0 {
		buf.WriteString(`"id":`)
		fflib.WriteJsonString(buf, string(mj.ID))
		buf.WriteByte(',')
	}
	if len(mj.Name) != 0 {
		buf.WriteString(`"name":`)
		fflib.WriteJsonString(buf, string(mj.Name))
		buf.WriteByte(',')
	}
	if len(mj.Domain) != 0 {
		buf.WriteString(`"domain":`)
		fflib.WriteJsonString(buf, string(mj.Domain))
		buf.WriteByte(',')
	}
	if len(mj.Cat) != 0 {
		buf.WriteString(`"cat":`)
		if mj.Cat != nil {
			buf.WriteString(`[`)
			for i, v := range mj.Cat {
				if i != 0 {
					buf.WriteString(`,`)
				}
				fflib.WriteJsonString(buf, string(v))
			}
			buf.WriteString(`]`)
		} else {
			buf.WriteString(`null`)
		}
		buf.WriteByte(',')
	}
	if len(mj.SectionCat) != 0 {
		buf.WriteString(`"sectioncat":`)
		if mj.SectionCat != nil {
			buf.WriteString(`[`)
			for i, v := range mj.SectionCat {
				if i != 0 {
					buf.WriteString(`,`)
				}
				fflib.WriteJsonString(buf, string(v))
			}
			buf.WriteString(`]`)
		} else {
			buf.WriteString(`null`)
		}
		buf.WriteByte(',')
	}
	if len(mj.PageCat) != 0 {
		buf.WriteString(`"pagecat":`)
		if mj.PageCat != nil {
			buf.WriteString(`[`)
			for i, v := range mj.PageCat {
				if i != 0 {
					buf.WriteString(`,`)
				}
				fflib.WriteJsonString(buf, string(v))
			}
			buf.WriteString(`]`)
		} else {
			buf.WriteString(`null`)
		}
		buf.WriteByte(',')
	}
	if mj.PrivacyPolicy != nil {
		if true {
			buf.WriteString(`"pivacypolicy":`)
			fflib.FormatBits2(buf, uint64(*mj.PrivacyPolicy), 10, *mj.PrivacyPolicy < 0)
			buf.WriteByte(',')
		}
	}
	if mj.Publisher != nil {
		if true {
			/* Struct fall back. type=openrtb.Publisher kind=struct */
			buf.WriteString(`"publisher":`)
			err = buf.Encode(mj.Publisher)
			if err != nil {
				return err
			}
			buf.WriteByte(',')
		}
	}
	if mj.Content != nil {
		if true {
			buf.WriteString(`"content":`)

			{

				err = mj.Content.MarshalJSONBuf(buf)
				if err != nil {
					return err
				}

			}
			buf.WriteByte(',')
		}
	}
	if len(mj.Keywords) != 0 {
		buf.WriteString(`"keywords":`)
		fflib.WriteJsonString(buf, string(mj.Keywords))
		buf.WriteByte(',')
	}
	if mj.Ext != nil {
		if true {
			buf.WriteString(`"ext":`)

			{

				obj, err = mj.Ext.MarshalJSON()
				if err != nil {
					return err
				}
				buf.Write(obj)

			}
			buf.WriteByte(',')
		}
	}
	buf.Rewind(1)
	buf.WriteByte('}')
	return nil
}

const (
	ffj_t_Inventorybase = iota
	ffj_t_Inventoryno_such_key

	ffj_t_Inventory_ID

	ffj_t_Inventory_Name

	ffj_t_Inventory_Domain

	ffj_t_Inventory_Cat

	ffj_t_Inventory_SectionCat

	ffj_t_Inventory_PageCat

	ffj_t_Inventory_PrivacyPolicy

	ffj_t_Inventory_Publisher

	ffj_t_Inventory_Content

	ffj_t_Inventory_Keywords

	ffj_t_Inventory_Ext
)

var ffj_key_Inventory_ID = []byte("id")

var ffj_key_Inventory_Name = []byte("name")

var ffj_key_Inventory_Domain = []byte("domain")

var ffj_key_Inventory_Cat = []byte("cat")

var ffj_key_Inventory_SectionCat = []byte("sectioncat")

var ffj_key_Inventory_PageCat = []byte("pagecat")

var ffj_key_Inventory_PrivacyPolicy = []byte("pivacypolicy")

var ffj_key_Inventory_Publisher = []byte("publisher")

var ffj_key_Inventory_Content = []byte("content")

var ffj_key_Inventory_Keywords = []byte("keywords")

var ffj_key_Inventory_Ext = []byte("ext")

func (uj *Inventory) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return uj.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

func (uj *Inventory) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error = nil
	currentKey := ffj_t_Inventorybase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffj_t_Inventoryno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'c':

					if bytes.Equal(ffj_key_Inventory_Cat, kn) {
						currentKey = ffj_t_Inventory_Cat
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Inventory_Content, kn) {
						currentKey = ffj_t_Inventory_Content
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'd':

					if bytes.Equal(ffj_key_Inventory_Domain, kn) {
						currentKey = ffj_t_Inventory_Domain
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'e':

					if bytes.Equal(ffj_key_Inventory_Ext, kn) {
						currentKey = ffj_t_Inventory_Ext
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'i':

					if bytes.Equal(ffj_key_Inventory_ID, kn) {
						currentKey = ffj_t_Inventory_ID
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'k':

					if bytes.Equal(ffj_key_Inventory_Keywords, kn) {
						currentKey = ffj_t_Inventory_Keywords
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'n':

					if bytes.Equal(ffj_key_Inventory_Name, kn) {
						currentKey = ffj_t_Inventory_Name
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'p':

					if bytes.Equal(ffj_key_Inventory_PageCat, kn) {
						currentKey = ffj_t_Inventory_PageCat
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Inventory_PrivacyPolicy, kn) {
						currentKey = ffj_t_Inventory_PrivacyPolicy
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Inventory_Publisher, kn) {
						currentKey = ffj_t_Inventory_Publisher
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 's':

					if bytes.Equal(ffj_key_Inventory_SectionCat, kn) {
						currentKey = ffj_t_Inventory_SectionCat
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.SimpleLetterEqualFold(ffj_key_Inventory_Ext, kn) {
					currentKey = ffj_t_Inventory_Ext
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Inventory_Keywords, kn) {
					currentKey = ffj_t_Inventory_Keywords
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Inventory_Content, kn) {
					currentKey = ffj_t_Inventory_Content
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Inventory_Publisher, kn) {
					currentKey = ffj_t_Inventory_Publisher
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Inventory_PrivacyPolicy, kn) {
					currentKey = ffj_t_Inventory_PrivacyPolicy
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Inventory_PageCat, kn) {
					currentKey = ffj_t_Inventory_PageCat
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Inventory_SectionCat, kn) {
					currentKey = ffj_t_Inventory_SectionCat
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Inventory_Cat, kn) {
					currentKey = ffj_t_Inventory_Cat
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Inventory_Domain, kn) {
					currentKey = ffj_t_Inventory_Domain
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Inventory_Name, kn) {
					currentKey = ffj_t_Inventory_Name
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Inventory_ID, kn) {
					currentKey = ffj_t_Inventory_ID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffj_t_Inventoryno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffj_t_Inventory_ID:
					goto handle_ID

				case ffj_t_Inventory_Name:
					goto handle_Name

				case ffj_t_Inventory_Domain:
					goto handle_Domain

				case ffj_t_Inventory_Cat:
					goto handle_Cat

				case ffj_t_Inventory_SectionCat:
					goto handle_SectionCat

				case ffj_t_Inventory_PageCat:
					goto handle_PageCat

				case ffj_t_Inventory_PrivacyPolicy:
					goto handle_PrivacyPolicy

				case ffj_t_Inventory_Publisher:
					goto handle_Publisher

				case ffj_t_Inventory_Content:
					goto handle_Content

				case ffj_t_Inventory_Keywords:
					goto handle_Keywords

				case ffj_t_Inventory_Ext:
					goto handle_Ext

				case ffj_t_Inventoryno_such_key:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_ID:

	/* handler: uj.ID type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.ID = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Name:

	/* handler: uj.Name type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Name = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Domain:

	/* handler: uj.Domain type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Domain = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Cat:

	/* handler: uj.Cat type=[]string kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			uj.Cat = nil
		} else {

			uj.Cat = make([]string, 0)

			wantVal := true

			for {

				var tmp_uj__Cat string

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: tmp_uj__Cat type=string kind=string quoted=false*/

				{

					{
						if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
							return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
						}
					}

					if tok == fflib.FFTok_null {

					} else {

						outBuf := fs.Output.Bytes()

						tmp_uj__Cat = string(string(outBuf))

					}
				}

				uj.Cat = append(uj.Cat, tmp_uj__Cat)
				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_SectionCat:

	/* handler: uj.SectionCat type=[]string kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			uj.SectionCat = nil
		} else {

			uj.SectionCat = make([]string, 0)

			wantVal := true

			for {

				var tmp_uj__SectionCat string

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: tmp_uj__SectionCat type=string kind=string quoted=false*/

				{

					{
						if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
							return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
						}
					}

					if tok == fflib.FFTok_null {

					} else {

						outBuf := fs.Output.Bytes()

						tmp_uj__SectionCat = string(string(outBuf))

					}
				}

				uj.SectionCat = append(uj.SectionCat, tmp_uj__SectionCat)
				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_PageCat:

	/* handler: uj.PageCat type=[]string kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			uj.PageCat = nil
		} else {

			uj.PageCat = make([]string, 0)

			wantVal := true

			for {

				var tmp_uj__PageCat string

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: tmp_uj__PageCat type=string kind=string quoted=false*/

				{

					{
						if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
							return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
						}
					}

					if tok == fflib.FFTok_null {

					} else {

						outBuf := fs.Output.Bytes()

						tmp_uj__PageCat = string(string(outBuf))

					}
				}

				uj.PageCat = append(uj.PageCat, tmp_uj__PageCat)
				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_PrivacyPolicy:

	/* handler: uj.PrivacyPolicy type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

			uj.PrivacyPolicy = nil

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			ttypval := int(tval)
			uj.PrivacyPolicy = &ttypval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Publisher:

	/* handler: uj.Publisher type=openrtb.Publisher kind=struct quoted=false*/

	{
		/* Falling back. type=openrtb.Publisher kind=struct */
		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		err = json.Unmarshal(tbuf, &uj.Publisher)
		if err != nil {
			return fs.WrapErr(err)
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Content:

	/* handler: uj.Content type=openrtb.Content kind=struct quoted=false*/

	{
		if tok == fflib.FFTok_null {

			uj.Content = nil

			state = fflib.FFParse_after_value
			goto mainparse
		}

		if uj.Content == nil {
			uj.Content = new(Content)
		}

		err = uj.Content.UnmarshalJSONFFLexer(fs, fflib.FFParse_want_key)
		if err != nil {
			return err
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Keywords:

	/* handler: uj.Keywords type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Keywords = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Ext:

	/* handler: uj.Ext type=json.RawMessage kind=slice quoted=false*/

	{
		if tok == fflib.FFTok_null {

			uj.Ext = nil

			state = fflib.FFParse_after_value
			goto mainparse
		}

		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		if uj.Ext == nil {
			uj.Ext = new(json.RawMessage)
		}

		err = uj.Ext.UnmarshalJSON(tbuf)
		if err != nil {
			return fs.WrapErr(err)
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:
	return nil
}

func (mj *Site) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if mj == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := mj.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
func (mj *Site) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if mj == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{ `)
	if len(mj.Page) != 0 {
		buf.WriteString(`"page":`)
		fflib.WriteJsonString(buf, string(mj.Page))
		buf.WriteByte(',')
	}
	if len(mj.Ref) != 0 {
		buf.WriteString(`"ref":`)
		fflib.WriteJsonString(buf, string(mj.Ref))
		buf.WriteByte(',')
	}
	if len(mj.Search) != 0 {
		buf.WriteString(`"search":`)
		fflib.WriteJsonString(buf, string(mj.Search))
		buf.WriteByte(',')
	}
	if mj.Mobile != 0 {
		buf.WriteString(`"mobile":`)
		fflib.FormatBits2(buf, uint64(mj.Mobile), 10, mj.Mobile < 0)
		buf.WriteByte(',')
	}
	if len(mj.ID) != 0 {
		buf.WriteString(`"id":`)
		fflib.WriteJsonString(buf, string(mj.ID))
		buf.WriteByte(',')
	}
	if len(mj.Name) != 0 {
		buf.WriteString(`"name":`)
		fflib.WriteJsonString(buf, string(mj.Name))
		buf.WriteByte(',')
	}
	if len(mj.Domain) != 0 {
		buf.WriteString(`"domain":`)
		fflib.WriteJsonString(buf, string(mj.Domain))
		buf.WriteByte(',')
	}
	if len(mj.Cat) != 0 {
		buf.WriteString(`"cat":`)
		if mj.Cat != nil {
			buf.WriteString(`[`)
			for i, v := range mj.Cat {
				if i != 0 {
					buf.WriteString(`,`)
				}
				fflib.WriteJsonString(buf, string(v))
			}
			buf.WriteString(`]`)
		} else {
			buf.WriteString(`null`)
		}
		buf.WriteByte(',')
	}
	if len(mj.SectionCat) != 0 {
		buf.WriteString(`"sectioncat":`)
		if mj.SectionCat != nil {
			buf.WriteString(`[`)
			for i, v := range mj.SectionCat {
				if i != 0 {
					buf.WriteString(`,`)
				}
				fflib.WriteJsonString(buf, string(v))
			}
			buf.WriteString(`]`)
		} else {
			buf.WriteString(`null`)
		}
		buf.WriteByte(',')
	}
	if len(mj.PageCat) != 0 {
		buf.WriteString(`"pagecat":`)
		if mj.PageCat != nil {
			buf.WriteString(`[`)
			for i, v := range mj.PageCat {
				if i != 0 {
					buf.WriteString(`,`)
				}
				fflib.WriteJsonString(buf, string(v))
			}
			buf.WriteString(`]`)
		} else {
			buf.WriteString(`null`)
		}
		buf.WriteByte(',')
	}
	if mj.PrivacyPolicy != nil {
		if true {
			buf.WriteString(`"pivacypolicy":`)
			fflib.FormatBits2(buf, uint64(*mj.PrivacyPolicy), 10, *mj.PrivacyPolicy < 0)
			buf.WriteByte(',')
		}
	}
	if mj.Publisher != nil {
		if true {
			/* Struct fall back. type=openrtb.Publisher kind=struct */
			buf.WriteString(`"publisher":`)
			err = buf.Encode(mj.Publisher)
			if err != nil {
				return err
			}
			buf.WriteByte(',')
		}
	}
	if mj.Content != nil {
		if true {
			buf.WriteString(`"content":`)

			{

				err = mj.Content.MarshalJSONBuf(buf)
				if err != nil {
					return err
				}

			}
			buf.WriteByte(',')
		}
	}
	if len(mj.Keywords) != 0 {
		buf.WriteString(`"keywords":`)
		fflib.WriteJsonString(buf, string(mj.Keywords))
		buf.WriteByte(',')
	}
	if mj.Ext != nil {
		if true {
			buf.WriteString(`"ext":`)

			{

				obj, err = mj.Ext.MarshalJSON()
				if err != nil {
					return err
				}
				buf.Write(obj)

			}
			buf.WriteByte(',')
		}
	}
	buf.Rewind(1)
	buf.WriteByte('}')
	return nil
}

const (
	ffj_t_Sitebase = iota
	ffj_t_Siteno_such_key

	ffj_t_Site_Page

	ffj_t_Site_Ref

	ffj_t_Site_Search

	ffj_t_Site_Mobile

	ffj_t_Site_ID

	ffj_t_Site_Name

	ffj_t_Site_Domain

	ffj_t_Site_Cat

	ffj_t_Site_SectionCat

	ffj_t_Site_PageCat

	ffj_t_Site_PrivacyPolicy

	ffj_t_Site_Publisher

	ffj_t_Site_Content

	ffj_t_Site_Keywords

	ffj_t_Site_Ext
)

var ffj_key_Site_Page = []byte("page")

var ffj_key_Site_Ref = []byte("ref")

var ffj_key_Site_Search = []byte("search")

var ffj_key_Site_Mobile = []byte("mobile")

var ffj_key_Site_ID = []byte("id")

var ffj_key_Site_Name = []byte("name")

var ffj_key_Site_Domain = []byte("domain")

var ffj_key_Site_Cat = []byte("cat")

var ffj_key_Site_SectionCat = []byte("sectioncat")

var ffj_key_Site_PageCat = []byte("pagecat")

var ffj_key_Site_PrivacyPolicy = []byte("pivacypolicy")

var ffj_key_Site_Publisher = []byte("publisher")

var ffj_key_Site_Content = []byte("content")

var ffj_key_Site_Keywords = []byte("keywords")

var ffj_key_Site_Ext = []byte("ext")

func (uj *Site) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return uj.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

func (uj *Site) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error = nil
	currentKey := ffj_t_Sitebase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffj_t_Siteno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'c':

					if bytes.Equal(ffj_key_Site_Cat, kn) {
						currentKey = ffj_t_Site_Cat
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Site_Content, kn) {
						currentKey = ffj_t_Site_Content
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'd':

					if bytes.Equal(ffj_key_Site_Domain, kn) {
						currentKey = ffj_t_Site_Domain
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'e':

					if bytes.Equal(ffj_key_Site_Ext, kn) {
						currentKey = ffj_t_Site_Ext
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'i':

					if bytes.Equal(ffj_key_Site_ID, kn) {
						currentKey = ffj_t_Site_ID
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'k':

					if bytes.Equal(ffj_key_Site_Keywords, kn) {
						currentKey = ffj_t_Site_Keywords
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'm':

					if bytes.Equal(ffj_key_Site_Mobile, kn) {
						currentKey = ffj_t_Site_Mobile
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'n':

					if bytes.Equal(ffj_key_Site_Name, kn) {
						currentKey = ffj_t_Site_Name
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'p':

					if bytes.Equal(ffj_key_Site_Page, kn) {
						currentKey = ffj_t_Site_Page
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Site_PageCat, kn) {
						currentKey = ffj_t_Site_PageCat
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Site_PrivacyPolicy, kn) {
						currentKey = ffj_t_Site_PrivacyPolicy
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Site_Publisher, kn) {
						currentKey = ffj_t_Site_Publisher
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'r':

					if bytes.Equal(ffj_key_Site_Ref, kn) {
						currentKey = ffj_t_Site_Ref
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 's':

					if bytes.Equal(ffj_key_Site_Search, kn) {
						currentKey = ffj_t_Site_Search
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Site_SectionCat, kn) {
						currentKey = ffj_t_Site_SectionCat
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.SimpleLetterEqualFold(ffj_key_Site_Ext, kn) {
					currentKey = ffj_t_Site_Ext
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Site_Keywords, kn) {
					currentKey = ffj_t_Site_Keywords
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Site_Content, kn) {
					currentKey = ffj_t_Site_Content
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Site_Publisher, kn) {
					currentKey = ffj_t_Site_Publisher
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Site_PrivacyPolicy, kn) {
					currentKey = ffj_t_Site_PrivacyPolicy
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Site_PageCat, kn) {
					currentKey = ffj_t_Site_PageCat
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Site_SectionCat, kn) {
					currentKey = ffj_t_Site_SectionCat
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Site_Cat, kn) {
					currentKey = ffj_t_Site_Cat
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Site_Domain, kn) {
					currentKey = ffj_t_Site_Domain
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Site_Name, kn) {
					currentKey = ffj_t_Site_Name
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Site_ID, kn) {
					currentKey = ffj_t_Site_ID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Site_Mobile, kn) {
					currentKey = ffj_t_Site_Mobile
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Site_Search, kn) {
					currentKey = ffj_t_Site_Search
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Site_Ref, kn) {
					currentKey = ffj_t_Site_Ref
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Site_Page, kn) {
					currentKey = ffj_t_Site_Page
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffj_t_Siteno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffj_t_Site_Page:
					goto handle_Page

				case ffj_t_Site_Ref:
					goto handle_Ref

				case ffj_t_Site_Search:
					goto handle_Search

				case ffj_t_Site_Mobile:
					goto handle_Mobile

				case ffj_t_Site_ID:
					goto handle_ID

				case ffj_t_Site_Name:
					goto handle_Name

				case ffj_t_Site_Domain:
					goto handle_Domain

				case ffj_t_Site_Cat:
					goto handle_Cat

				case ffj_t_Site_SectionCat:
					goto handle_SectionCat

				case ffj_t_Site_PageCat:
					goto handle_PageCat

				case ffj_t_Site_PrivacyPolicy:
					goto handle_PrivacyPolicy

				case ffj_t_Site_Publisher:
					goto handle_Publisher

				case ffj_t_Site_Content:
					goto handle_Content

				case ffj_t_Site_Keywords:
					goto handle_Keywords

				case ffj_t_Site_Ext:
					goto handle_Ext

				case ffj_t_Siteno_such_key:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_Page:

	/* handler: uj.Page type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Page = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Ref:

	/* handler: uj.Ref type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Ref = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Search:

	/* handler: uj.Search type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Search = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Mobile:

	/* handler: uj.Mobile type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.Mobile = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_ID:

	/* handler: uj.ID type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.ID = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Name:

	/* handler: uj.Name type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Name = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Domain:

	/* handler: uj.Domain type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Domain = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Cat:

	/* handler: uj.Cat type=[]string kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			uj.Cat = nil
		} else {

			uj.Cat = make([]string, 0)

			wantVal := true

			for {

				var tmp_uj__Cat string

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: tmp_uj__Cat type=string kind=string quoted=false*/

				{

					{
						if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
							return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
						}
					}

					if tok == fflib.FFTok_null {

					} else {

						outBuf := fs.Output.Bytes()

						tmp_uj__Cat = string(string(outBuf))

					}
				}

				uj.Cat = append(uj.Cat, tmp_uj__Cat)
				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_SectionCat:

	/* handler: uj.SectionCat type=[]string kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			uj.SectionCat = nil
		} else {

			uj.SectionCat = make([]string, 0)

			wantVal := true

			for {

				var tmp_uj__SectionCat string

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: tmp_uj__SectionCat type=string kind=string quoted=false*/

				{

					{
						if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
							return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
						}
					}

					if tok == fflib.FFTok_null {

					} else {

						outBuf := fs.Output.Bytes()

						tmp_uj__SectionCat = string(string(outBuf))

					}
				}

				uj.SectionCat = append(uj.SectionCat, tmp_uj__SectionCat)
				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_PageCat:

	/* handler: uj.PageCat type=[]string kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			uj.PageCat = nil
		} else {

			uj.PageCat = make([]string, 0)

			wantVal := true

			for {

				var tmp_uj__PageCat string

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: tmp_uj__PageCat type=string kind=string quoted=false*/

				{

					{
						if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
							return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
						}
					}

					if tok == fflib.FFTok_null {

					} else {

						outBuf := fs.Output.Bytes()

						tmp_uj__PageCat = string(string(outBuf))

					}
				}

				uj.PageCat = append(uj.PageCat, tmp_uj__PageCat)
				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_PrivacyPolicy:

	/* handler: uj.PrivacyPolicy type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

			uj.PrivacyPolicy = nil

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			ttypval := int(tval)
			uj.PrivacyPolicy = &ttypval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Publisher:

	/* handler: uj.Publisher type=openrtb.Publisher kind=struct quoted=false*/

	{
		/* Falling back. type=openrtb.Publisher kind=struct */
		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		err = json.Unmarshal(tbuf, &uj.Publisher)
		if err != nil {
			return fs.WrapErr(err)
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Content:

	/* handler: uj.Content type=openrtb.Content kind=struct quoted=false*/

	{
		if tok == fflib.FFTok_null {

			uj.Content = nil

			state = fflib.FFParse_after_value
			goto mainparse
		}

		if uj.Content == nil {
			uj.Content = new(Content)
		}

		err = uj.Content.UnmarshalJSONFFLexer(fs, fflib.FFParse_want_key)
		if err != nil {
			return err
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Keywords:

	/* handler: uj.Keywords type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Keywords = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Ext:

	/* handler: uj.Ext type=json.RawMessage kind=slice quoted=false*/

	{
		if tok == fflib.FFTok_null {

			uj.Ext = nil

			state = fflib.FFParse_after_value
			goto mainparse
		}

		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		if uj.Ext == nil {
			uj.Ext = new(json.RawMessage)
		}

		err = uj.Ext.UnmarshalJSON(tbuf)
		if err != nil {
			return fs.WrapErr(err)
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:
	return nil
}
