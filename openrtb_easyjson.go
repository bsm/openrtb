// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package openrtb

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonB27eec76DecodeGithubComBsmOpenrtbV3(in *jlexer.Lexer, out *User) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "buyerid":
			out.BuyerID = string(in.String())
		case "buyeruid":
			out.BuyerUID = string(in.String())
		case "yob":
			out.YearOfBirth = int(in.Int())
		case "gender":
			out.Gender = string(in.String())
		case "keywords":
			out.Keywords = string(in.String())
		case "customdata":
			out.CustomData = string(in.String())
		case "geo":
			if in.IsNull() {
				in.Skip()
				out.Geo = nil
			} else {
				if out.Geo == nil {
					out.Geo = new(Geo)
				}
				(*out.Geo).UnmarshalEasyJSON(in)
			}
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]Data, 0, 0)
					} else {
						out.Data = []Data{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Data
					(v1).UnmarshalEasyJSON(in)
					out.Data = append(out.Data, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ext":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Ext).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB27eec76EncodeGithubComBsmOpenrtbV3(out *jwriter.Writer, in User) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	if in.BuyerID != "" {
		const prefix string = ",\"buyerid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BuyerID))
	}
	if in.BuyerUID != "" {
		const prefix string = ",\"buyeruid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BuyerUID))
	}
	if in.YearOfBirth != 0 {
		const prefix string = ",\"yob\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.YearOfBirth))
	}
	if in.Gender != "" {
		const prefix string = ",\"gender\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Gender))
	}
	if in.Keywords != "" {
		const prefix string = ",\"keywords\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Keywords))
	}
	if in.CustomData != "" {
		const prefix string = ",\"customdata\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CustomData))
	}
	if in.Geo != nil {
		const prefix string = ",\"geo\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Geo).MarshalEasyJSON(out)
	}
	if len(in.Data) != 0 {
		const prefix string = ",\"data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v2, v3 := range in.Data {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Ext) != 0 {
		const prefix string = ",\"ext\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Ext).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v User) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB27eec76EncodeGithubComBsmOpenrtbV3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v User) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB27eec76EncodeGithubComBsmOpenrtbV3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *User) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB27eec76DecodeGithubComBsmOpenrtbV3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *User) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB27eec76DecodeGithubComBsmOpenrtbV3(l, v)
}
func easyjsonB27eec76DecodeGithubComBsmOpenrtbV31(in *jlexer.Lexer, out *ThirdParty) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "cat":
			if in.IsNull() {
				in.Skip()
				out.Categories = nil
			} else {
				in.Delim('[')
				if out.Categories == nil {
					if !in.IsDelim(']') {
						out.Categories = make([]ContentCategory, 0, 4)
					} else {
						out.Categories = []ContentCategory{}
					}
				} else {
					out.Categories = (out.Categories)[:0]
				}
				for !in.IsDelim(']') {
					var v4 ContentCategory
					v4 = ContentCategory(in.String())
					out.Categories = append(out.Categories, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "domain":
			out.Domain = string(in.String())
		case "ext":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Ext).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB27eec76EncodeGithubComBsmOpenrtbV31(out *jwriter.Writer, in ThirdParty) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if len(in.Categories) != 0 {
		const prefix string = ",\"cat\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v5, v6 := range in.Categories {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.String(string(v6))
			}
			out.RawByte(']')
		}
	}
	if in.Domain != "" {
		const prefix string = ",\"domain\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Domain))
	}
	if len(in.Ext) != 0 {
		const prefix string = ",\"ext\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Ext).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ThirdParty) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB27eec76EncodeGithubComBsmOpenrtbV31(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ThirdParty) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB27eec76EncodeGithubComBsmOpenrtbV31(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ThirdParty) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB27eec76DecodeGithubComBsmOpenrtbV31(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ThirdParty) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB27eec76DecodeGithubComBsmOpenrtbV31(l, v)
}
func easyjsonB27eec76DecodeGithubComBsmOpenrtbV32(in *jlexer.Lexer, out *Segment) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "value":
			out.Value = string(in.String())
		case "ext":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Ext).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB27eec76EncodeGithubComBsmOpenrtbV32(out *jwriter.Writer, in Segment) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Value != "" {
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Value))
	}
	if len(in.Ext) != 0 {
		const prefix string = ",\"ext\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Ext).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Segment) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB27eec76EncodeGithubComBsmOpenrtbV32(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Segment) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB27eec76EncodeGithubComBsmOpenrtbV32(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Segment) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB27eec76DecodeGithubComBsmOpenrtbV32(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Segment) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB27eec76DecodeGithubComBsmOpenrtbV32(l, v)
}
func easyjsonB27eec76DecodeGithubComBsmOpenrtbV33(in *jlexer.Lexer, out *Regulations) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "coppa":
			out.COPPA = int(in.Int())
		case "ext":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Ext).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB27eec76EncodeGithubComBsmOpenrtbV33(out *jwriter.Writer, in Regulations) {
	out.RawByte('{')
	first := true
	_ = first
	if in.COPPA != 0 {
		const prefix string = ",\"coppa\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.COPPA))
	}
	if len(in.Ext) != 0 {
		const prefix string = ",\"ext\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Ext).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Regulations) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB27eec76EncodeGithubComBsmOpenrtbV33(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Regulations) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB27eec76EncodeGithubComBsmOpenrtbV33(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Regulations) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB27eec76DecodeGithubComBsmOpenrtbV33(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Regulations) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB27eec76DecodeGithubComBsmOpenrtbV33(l, v)
}
func easyjsonB27eec76DecodeGithubComBsmOpenrtbV34(in *jlexer.Lexer, out *Geo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "lat":
			out.Latitude = float64(in.Float64())
		case "lon":
			out.Longitude = float64(in.Float64())
		case "type":
			out.Type = LocationType(in.Int())
		case "accuracy":
			out.Accuracy = int(in.Int())
		case "lastfix":
			out.LastFix = int(in.Int())
		case "ipservice":
			out.IPService = IPLocation(in.Int())
		case "country":
			out.Country = string(in.String())
		case "region":
			out.Region = string(in.String())
		case "regionFIPS104":
			out.RegionFIPS104 = string(in.String())
		case "metro":
			out.Metro = string(in.String())
		case "city":
			out.City = string(in.String())
		case "zip":
			out.ZIP = string(in.String())
		case "utcoffset":
			out.UTCOffset = int(in.Int())
		case "ext":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Ext).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB27eec76EncodeGithubComBsmOpenrtbV34(out *jwriter.Writer, in Geo) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Latitude != 0 {
		const prefix string = ",\"lat\":"
		first = false
		out.RawString(prefix[1:])
		out.Float64(float64(in.Latitude))
	}
	if in.Longitude != 0 {
		const prefix string = ",\"lon\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Longitude))
	}
	if in.Type != 0 {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Type))
	}
	if in.Accuracy != 0 {
		const prefix string = ",\"accuracy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Accuracy))
	}
	if in.LastFix != 0 {
		const prefix string = ",\"lastfix\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.LastFix))
	}
	if in.IPService != 0 {
		const prefix string = ",\"ipservice\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.IPService))
	}
	if in.Country != "" {
		const prefix string = ",\"country\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Country))
	}
	if in.Region != "" {
		const prefix string = ",\"region\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Region))
	}
	if in.RegionFIPS104 != "" {
		const prefix string = ",\"regionFIPS104\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RegionFIPS104))
	}
	if in.Metro != "" {
		const prefix string = ",\"metro\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Metro))
	}
	if in.City != "" {
		const prefix string = ",\"city\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.City))
	}
	if in.ZIP != "" {
		const prefix string = ",\"zip\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ZIP))
	}
	if in.UTCOffset != 0 {
		const prefix string = ",\"utcoffset\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.UTCOffset))
	}
	if len(in.Ext) != 0 {
		const prefix string = ",\"ext\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Ext).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Geo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB27eec76EncodeGithubComBsmOpenrtbV34(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Geo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB27eec76EncodeGithubComBsmOpenrtbV34(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Geo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB27eec76DecodeGithubComBsmOpenrtbV34(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Geo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB27eec76DecodeGithubComBsmOpenrtbV34(l, v)
}
func easyjsonB27eec76DecodeGithubComBsmOpenrtbV35(in *jlexer.Lexer, out *Format) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "w":
			out.Width = int(in.Int())
		case "h":
			out.Height = int(in.Int())
		case "wratio":
			out.WidthRatio = int(in.Int())
		case "hration":
			out.HeightRatio = int(in.Int())
		case "wmin":
			out.WidthMin = int(in.Int())
		case "ext":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Ext).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB27eec76EncodeGithubComBsmOpenrtbV35(out *jwriter.Writer, in Format) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Width != 0 {
		const prefix string = ",\"w\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.Width))
	}
	if in.Height != 0 {
		const prefix string = ",\"h\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Height))
	}
	if in.WidthRatio != 0 {
		const prefix string = ",\"wratio\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.WidthRatio))
	}
	if in.HeightRatio != 0 {
		const prefix string = ",\"hration\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.HeightRatio))
	}
	if in.WidthMin != 0 {
		const prefix string = ",\"wmin\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.WidthMin))
	}
	if len(in.Ext) != 0 {
		const prefix string = ",\"ext\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Ext).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Format) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB27eec76EncodeGithubComBsmOpenrtbV35(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Format) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB27eec76EncodeGithubComBsmOpenrtbV35(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Format) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB27eec76DecodeGithubComBsmOpenrtbV35(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Format) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB27eec76DecodeGithubComBsmOpenrtbV35(l, v)
}
func easyjsonB27eec76DecodeGithubComBsmOpenrtbV36(in *jlexer.Lexer, out *Data) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "segment":
			if in.IsNull() {
				in.Skip()
				out.Segment = nil
			} else {
				in.Delim('[')
				if out.Segment == nil {
					if !in.IsDelim(']') {
						out.Segment = make([]Segment, 0, 0)
					} else {
						out.Segment = []Segment{}
					}
				} else {
					out.Segment = (out.Segment)[:0]
				}
				for !in.IsDelim(']') {
					var v7 Segment
					(v7).UnmarshalEasyJSON(in)
					out.Segment = append(out.Segment, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ext":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Ext).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB27eec76EncodeGithubComBsmOpenrtbV36(out *jwriter.Writer, in Data) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if len(in.Segment) != 0 {
		const prefix string = ",\"segment\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v8, v9 := range in.Segment {
				if v8 > 0 {
					out.RawByte(',')
				}
				(v9).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Ext) != 0 {
		const prefix string = ",\"ext\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Ext).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Data) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB27eec76EncodeGithubComBsmOpenrtbV36(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Data) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB27eec76EncodeGithubComBsmOpenrtbV36(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Data) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB27eec76DecodeGithubComBsmOpenrtbV36(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Data) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB27eec76DecodeGithubComBsmOpenrtbV36(l, v)
}
func easyjsonB27eec76DecodeGithubComBsmOpenrtbV37(in *jlexer.Lexer, out *ChannelEntity) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "domain":
			out.Domain = string(in.String())
		case "ext":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Ext).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB27eec76EncodeGithubComBsmOpenrtbV37(out *jwriter.Writer, in ChannelEntity) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Domain != "" {
		const prefix string = ",\"domain\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Domain))
	}
	if len(in.Ext) != 0 {
		const prefix string = ",\"ext\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Ext).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChannelEntity) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB27eec76EncodeGithubComBsmOpenrtbV37(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChannelEntity) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB27eec76EncodeGithubComBsmOpenrtbV37(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChannelEntity) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB27eec76DecodeGithubComBsmOpenrtbV37(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChannelEntity) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB27eec76DecodeGithubComBsmOpenrtbV37(l, v)
}
