// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package openrtb

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonFa8885e7DecodeGithubComBsmOpenrtbV3(in *jlexer.Lexer, out *UserAgent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "browsers":
			if in.IsNull() {
				in.Skip()
				out.Browsers = nil
			} else {
				in.Delim('[')
				if out.Browsers == nil {
					if !in.IsDelim(']') {
						out.Browsers = make([]BrandVersion, 0, 1)
					} else {
						out.Browsers = []BrandVersion{}
					}
				} else {
					out.Browsers = (out.Browsers)[:0]
				}
				for !in.IsDelim(']') {
					var v1 BrandVersion
					(v1).UnmarshalEasyJSON(in)
					out.Browsers = append(out.Browsers, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "platform":
			(out.Platform).UnmarshalEasyJSON(in)
		case "mobile":
			out.Mobile = int(in.Int())
		case "architecture":
			out.Architecture = string(in.String())
		case "bitness":
			out.Bitness = string(in.String())
		case "model":
			out.Model = string(in.String())
		case "source":
			out.Source = int(in.Int())
		case "ext":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Ext).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa8885e7EncodeGithubComBsmOpenrtbV3(out *jwriter.Writer, in UserAgent) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Browsers) != 0 {
		const prefix string = ",\"browsers\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v2, v3 := range in.Browsers {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if true {
		const prefix string = ",\"platform\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Platform).MarshalEasyJSON(out)
	}
	if in.Mobile != 0 {
		const prefix string = ",\"mobile\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Mobile))
	}
	if in.Architecture != "" {
		const prefix string = ",\"architecture\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Architecture))
	}
	if in.Bitness != "" {
		const prefix string = ",\"bitness\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Bitness))
	}
	if in.Model != "" {
		const prefix string = ",\"model\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Model))
	}
	if in.Source != 0 {
		const prefix string = ",\"source\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Source))
	}
	if len(in.Ext) != 0 {
		const prefix string = ",\"ext\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Ext).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserAgent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa8885e7EncodeGithubComBsmOpenrtbV3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserAgent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa8885e7EncodeGithubComBsmOpenrtbV3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserAgent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa8885e7DecodeGithubComBsmOpenrtbV3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserAgent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa8885e7DecodeGithubComBsmOpenrtbV3(l, v)
}
func easyjsonFa8885e7DecodeGithubComBsmOpenrtbV31(in *jlexer.Lexer, out *BrandVersion) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "brand":
			out.Brand = string(in.String())
		case "version":
			if in.IsNull() {
				in.Skip()
				out.Version = nil
			} else {
				in.Delim('[')
				if out.Version == nil {
					if !in.IsDelim(']') {
						out.Version = make([]string, 0, 4)
					} else {
						out.Version = []string{}
					}
				} else {
					out.Version = (out.Version)[:0]
				}
				for !in.IsDelim(']') {
					var v4 string
					v4 = string(in.String())
					out.Version = append(out.Version, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ext":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Ext).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa8885e7EncodeGithubComBsmOpenrtbV31(out *jwriter.Writer, in BrandVersion) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Brand != "" {
		const prefix string = ",\"brand\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Brand))
	}
	if len(in.Version) != 0 {
		const prefix string = ",\"version\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v5, v6 := range in.Version {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.String(string(v6))
			}
			out.RawByte(']')
		}
	}
	if len(in.Ext) != 0 {
		const prefix string = ",\"ext\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Ext).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BrandVersion) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa8885e7EncodeGithubComBsmOpenrtbV31(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BrandVersion) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa8885e7EncodeGithubComBsmOpenrtbV31(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BrandVersion) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa8885e7DecodeGithubComBsmOpenrtbV31(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BrandVersion) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa8885e7DecodeGithubComBsmOpenrtbV31(l, v)
}
