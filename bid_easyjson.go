// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package openrtb

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson31527abDecodeGithubComBsmOpenrtbV3(in *jlexer.Lexer, out *Bid) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "impid":
			out.ImpID = string(in.String())
		case "price":
			out.Price = float64(in.Float64())
		case "adid":
			out.AdID = string(in.String())
		case "nurl":
			out.NoticeURL = string(in.String())
		case "burl":
			out.BillingURL = string(in.String())
		case "lurl":
			out.LossURL = string(in.String())
		case "adm":
			out.AdMarkup = string(in.String())
		case "adomain":
			if in.IsNull() {
				in.Skip()
				out.AdvDomains = nil
			} else {
				in.Delim('[')
				if out.AdvDomains == nil {
					if !in.IsDelim(']') {
						out.AdvDomains = make([]string, 0, 4)
					} else {
						out.AdvDomains = []string{}
					}
				} else {
					out.AdvDomains = (out.AdvDomains)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.AdvDomains = append(out.AdvDomains, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "bundle":
			out.Bundle = string(in.String())
		case "iurl":
			out.ImageURL = string(in.String())
		case "cid":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CampaignID).UnmarshalJSON(data))
			}
		case "crid":
			out.CreativeID = string(in.String())
		case "tactic":
			out.Tactic = string(in.String())
		case "cat":
			if in.IsNull() {
				in.Skip()
				out.Categories = nil
			} else {
				in.Delim('[')
				if out.Categories == nil {
					if !in.IsDelim(']') {
						out.Categories = make([]ContentCategory, 0, 4)
					} else {
						out.Categories = []ContentCategory{}
					}
				} else {
					out.Categories = (out.Categories)[:0]
				}
				for !in.IsDelim(']') {
					var v2 ContentCategory
					v2 = ContentCategory(in.String())
					out.Categories = append(out.Categories, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "attr":
			if in.IsNull() {
				in.Skip()
				out.Attrs = nil
			} else {
				in.Delim('[')
				if out.Attrs == nil {
					if !in.IsDelim(']') {
						out.Attrs = make([]CreativeAttribute, 0, 8)
					} else {
						out.Attrs = []CreativeAttribute{}
					}
				} else {
					out.Attrs = (out.Attrs)[:0]
				}
				for !in.IsDelim(']') {
					var v3 CreativeAttribute
					v3 = CreativeAttribute(in.Int())
					out.Attrs = append(out.Attrs, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "api":
			out.API = APIFramework(in.Int())
		case "protocol":
			out.Protocol = Protocol(in.Int())
		case "qagmediarating":
			out.MediaRating = IQGRating(in.Int())
		case "language":
			out.Language = string(in.String())
		case "dealid":
			out.DealID = string(in.String())
		case "w":
			out.Width = int(in.Int())
		case "h":
			out.Height = int(in.Int())
		case "wratio":
			out.WidthRatio = int(in.Int())
		case "hratio":
			out.HeightRatio = int(in.Int())
		case "apis":
			out.APIS = APIFramework(in.Int())
		case "langb":
			out.LangB = string(in.String())
		case "dur":
			out.Duration = int(in.Int())
		case "mtype":
			out.MarkupType = MarkupType(in.Int())
		case "slotinpod":
			out.SlotInPod = SlotPositionInPod(in.Int())
		case "cattax":
			out.CategoryTaxonomy = CategoryTaxonomy(in.Int())
		case "exp":
			out.Exp = int(in.Int())
		case "ext":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Ext).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson31527abEncodeGithubComBsmOpenrtbV3(out *jwriter.Writer, in Bid) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"impid\":"
		out.RawString(prefix)
		out.String(string(in.ImpID))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.Float64(float64(in.Price))
	}
	if in.AdID != "" {
		const prefix string = ",\"adid\":"
		out.RawString(prefix)
		out.String(string(in.AdID))
	}
	if in.NoticeURL != "" {
		const prefix string = ",\"nurl\":"
		out.RawString(prefix)
		out.String(string(in.NoticeURL))
	}
	if in.BillingURL != "" {
		const prefix string = ",\"burl\":"
		out.RawString(prefix)
		out.String(string(in.BillingURL))
	}
	if in.LossURL != "" {
		const prefix string = ",\"lurl\":"
		out.RawString(prefix)
		out.String(string(in.LossURL))
	}
	if in.AdMarkup != "" {
		const prefix string = ",\"adm\":"
		out.RawString(prefix)
		out.String(string(in.AdMarkup))
	}
	if len(in.AdvDomains) != 0 {
		const prefix string = ",\"adomain\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v4, v5 := range in.AdvDomains {
				if v4 > 0 {
					out.RawByte(',')
				}
				out.String(string(v5))
			}
			out.RawByte(']')
		}
	}
	if in.Bundle != "" {
		const prefix string = ",\"bundle\":"
		out.RawString(prefix)
		out.String(string(in.Bundle))
	}
	if in.ImageURL != "" {
		const prefix string = ",\"iurl\":"
		out.RawString(prefix)
		out.String(string(in.ImageURL))
	}
	if in.CampaignID != "" {
		const prefix string = ",\"cid\":"
		out.RawString(prefix)
		out.String(string(in.CampaignID))
	}
	if in.CreativeID != "" {
		const prefix string = ",\"crid\":"
		out.RawString(prefix)
		out.String(string(in.CreativeID))
	}
	if in.Tactic != "" {
		const prefix string = ",\"tactic\":"
		out.RawString(prefix)
		out.String(string(in.Tactic))
	}
	if len(in.Categories) != 0 {
		const prefix string = ",\"cat\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v6, v7 := range in.Categories {
				if v6 > 0 {
					out.RawByte(',')
				}
				out.String(string(v7))
			}
			out.RawByte(']')
		}
	}
	if len(in.Attrs) != 0 {
		const prefix string = ",\"attr\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v8, v9 := range in.Attrs {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v9))
			}
			out.RawByte(']')
		}
	}
	if in.API != 0 {
		const prefix string = ",\"api\":"
		out.RawString(prefix)
		out.Int(int(in.API))
	}
	if in.Protocol != 0 {
		const prefix string = ",\"protocol\":"
		out.RawString(prefix)
		out.Int(int(in.Protocol))
	}
	if in.MediaRating != 0 {
		const prefix string = ",\"qagmediarating\":"
		out.RawString(prefix)
		out.Int(int(in.MediaRating))
	}
	if in.Language != "" {
		const prefix string = ",\"language\":"
		out.RawString(prefix)
		out.String(string(in.Language))
	}
	if in.DealID != "" {
		const prefix string = ",\"dealid\":"
		out.RawString(prefix)
		out.String(string(in.DealID))
	}
	if in.Width != 0 {
		const prefix string = ",\"w\":"
		out.RawString(prefix)
		out.Int(int(in.Width))
	}
	if in.Height != 0 {
		const prefix string = ",\"h\":"
		out.RawString(prefix)
		out.Int(int(in.Height))
	}
	if in.WidthRatio != 0 {
		const prefix string = ",\"wratio\":"
		out.RawString(prefix)
		out.Int(int(in.WidthRatio))
	}
	if in.HeightRatio != 0 {
		const prefix string = ",\"hratio\":"
		out.RawString(prefix)
		out.Int(int(in.HeightRatio))
	}
	if in.APIS != 0 {
		const prefix string = ",\"apis\":"
		out.RawString(prefix)
		out.Int(int(in.APIS))
	}
	if in.LangB != "" {
		const prefix string = ",\"langb\":"
		out.RawString(prefix)
		out.String(string(in.LangB))
	}
	if in.Duration != 0 {
		const prefix string = ",\"dur\":"
		out.RawString(prefix)
		out.Int(int(in.Duration))
	}
	if in.MarkupType != 0 {
		const prefix string = ",\"mtype\":"
		out.RawString(prefix)
		out.Int(int(in.MarkupType))
	}
	if in.SlotInPod != 0 {
		const prefix string = ",\"slotinpod\":"
		out.RawString(prefix)
		out.Int(int(in.SlotInPod))
	}
	if in.CategoryTaxonomy != 0 {
		const prefix string = ",\"cattax\":"
		out.RawString(prefix)
		out.Int(int(in.CategoryTaxonomy))
	}
	if in.Exp != 0 {
		const prefix string = ",\"exp\":"
		out.RawString(prefix)
		out.Int(int(in.Exp))
	}
	if len(in.Ext) != 0 {
		const prefix string = ",\"ext\":"
		out.RawString(prefix)
		out.Raw((in.Ext).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Bid) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson31527abEncodeGithubComBsmOpenrtbV3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Bid) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson31527abEncodeGithubComBsmOpenrtbV3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Bid) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson31527abDecodeGithubComBsmOpenrtbV3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Bid) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson31527abDecodeGithubComBsmOpenrtbV3(l, v)
}
